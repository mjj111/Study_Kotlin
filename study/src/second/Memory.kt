package second
/**
변수를 선언하면 메모리에 변수를 위한 공간이 생성된다.
지역 변수는 메모리의 스택(Stack) 영역에 저장된다. 스택은 메서드 호출과 함께 생성되는 로컬 변수를 저장하는 공간으로,
LIFO(Last In, First Out) 구조를 가진다. 메서드가 호출되면 관련 정보와 변수들이 스택에 순서대로 쌓이고,
메서드가 종료되면 해당 데이터는 스택에서 제거된다. 이러한 특성 때문에 지역 변수는 메서드 호출이 끝나면 자동으로 메모리에서 해제된다.

반면, 힙(Heap)은 객체가 저장되는 메모리 공간이다. 힙은 런타임에 동적으로 메모리를 할당하며,
가비지 컬렉터(Garbage Collector)에 의해 관리된다. 더 이상 참조되지 않는 객체는 자동으로 메모리에서 해제된다.
힙은 스택과 달리 유연하지만, 메모리 할당과 해제 속도가 상대적으로 느리다.

따라서 로컬 변수는 메서드 호출 시 생성되고 종료 시 해제되는 스택에 저장되며,
객체는 힙에 저장되어 가비지 컬렉터에 의해 수명이 관리된다.

 여기서 의문이 들 수있다. 왜 굳이 힙에 있는가?
 이는 하나의 객체를 여러 참조변수에서 공유하는 형태로 사용하여 훨씬 메모리 공간을 절약할 수 있기 때문이다.
*/

fun main() {
    val person = "John" // "John" 문자열은 힙 메모리의 String Pool에 저장, person 참조는 스택에 저장
    println(person)

    //기본적으로 원시 타입으로 스택에 저장되지만, Nullable 또는 필요한 경우 힙 메모리에 박싱된다.
    val a: Int = 10    // 원시 타입 (스택에 저장)
    val b: Int? = 10   // 박싱되어 힙에 저장
    println(a)
    println(b)
}

