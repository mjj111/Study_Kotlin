package third

/**
 * 이전에, 함수 호출하면 함수속에서 실행 흐름이 점프하고,
 * 끝나면 다시  호출시점으로 점프한다고 했다.
 * 이 과정은 프로그램의 성능을 미세하게 저해하는데,
 * inline 함수를 사용하면, 실행 흐름을 점프하지 않고!
 * 호출문을 함수의 몸체로 대체하기 때문에 성능을 조금이나마 개선할 수 있다고 한다.
 * 즉, 컴파일 시점에서 함수 호출문들은 스택에 쌓이는 함수 호출 방식이 아니라,
 * 말그대로 inline으로 ! 코드로! 들어가게된다. 그래서 아래와 같이 된다고 생각하면된다.
 * hello() -> println("hello")로 대체
 *
 * 다만, inline 함수는 함수속의 문장을 재활용하지 않기 때문에
 * 문장이 많은 함수를 inline으로 바꾸면 프로그램의 크기가 기하급수적으로 늘어난다..
 * 문장이 적고 빈번히 호출되는 함수만 inline으로 두는것이 권장된다.
 */

inline fun hello() {
    println("hello")
}

fun main(args: Array<String>) {
    hello()
    hello()
    hello()
}